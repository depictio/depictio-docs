{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#project-overview","title":"Project Overview","text":"<p>Depictio is an innovative microservices web-based platform designed to streamline the analysis of bioinformatics workflows by enabling the creation of customized visualization dashboards using various type of  outputs compatible with the platform. It provides a dynamic and interactive dashboard experience for quality control (QC) metrics monitoring and result exploration in omics. The platform is tailored towards large-scale studies and research facilities, offering support for various data formats and interactive data visualization tools.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Dynamic Dashboards: Real-time data interaction, customizable views, and user-driven exploration features.</li> <li>Diverse Data Format Support: Handles standard formats like CSV, TSV, XLSX, Parquet, and omics files like BED, BigBed, BigWig, BAM/CRAM, VCF.</li> <li>Robust Backend Technologies: Utilizes FastAPI, MongoDB, and Redis cache for high-performance data management and processing.</li> <li>Intuitive Frontend: Built on Plotly Dash, a ReactJS-based framework</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<p>Depictio architecture is composed of a microservices architecture, including 6 microservices currently:</p> <ol> <li> <p>FastAPI instance</p> </li> <li> <p>mongoDB database</p> </li> <li> <p>redis cache system</p> </li> <li> <p>JBrowse on-premise genome browser</p> </li> <li> <p>MinIO S3 bucket management instance</p> </li> <li> <p>Plotly Dash server</p> </li> </ol>"},{"location":"FAQ/faq/","title":"FAQ","text":"<p>Ongoing list of frequently asked questions.</p>"},{"location":"FAQ/faq/#know-issues","title":"Know issues","text":""},{"location":"api/api/","title":"API","text":"<p>Depictio API is built on top of FastAPI, a modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints. It is designed to be easy to use and understand, with a focus on performance and scalability. </p>"},{"location":"changelog/changelog/","title":"Changelog","text":""},{"location":"changelog/changelog/#v003","title":"v0.0.3","text":""},{"location":"changelog/changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Component size were modified to reflect better size on the dashboard</li> </ul>"},{"location":"changelog/changelog/#features","title":"Features","text":"<ul> <li>Edit component (goes to design part (step 3 of component creation))</li> <li>Display/hide component options</li> <li>Component options to dmc.ActionIcon (smaller icons without text)</li> <li>Reset all filters button</li> <li>Change offcanvas sidebar layout</li> <li>Admin view (list dashboards)</li> <li>Graph interaction (click, select data through \"Box select\")</li> <li>Reset graph interaction (via dedicated button)</li> <li>Public/private dashboard (public dashboards are visible but not editable by all users ; possibility to copy public dashboard to private personal dashboard)</li> </ul>"},{"location":"changelog/changelog/#v002","title":"v0.0.2","text":""},{"location":"changelog/changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Switch from dashboard &amp; component ID increment to UUID</li> <li>Fix double click on add component button</li> </ul>"},{"location":"changelog/changelog/#features_1","title":"Features","text":"<ul> <li>Autosave dashboard</li> <li>Duplicate dashboard</li> <li>Edit dashboard name</li> <li>Admin view (list users)</li> </ul>"},{"location":"changelog/changelog/#v001","title":"v0.0.1","text":""},{"location":"changelog/changelog/#features_2","title":"Features","text":"<ul> <li>Initial release of the project</li> <li>Support for creating dashboards with multiple components (figure, metrics card, interactive &amp; table)</li> <li>Drag &amp; layout components on the dashboard</li> <li>Delete components</li> </ul>"},{"location":"developer/developer/","title":"Developer guide","text":"<p>While Depictio is not yet operational, we welcome ideas, suggestions, and feedback from the community. If you have insights or want to contribute to the project, please feel free to open an issue or submit a pull request.</p> <ul> <li>Pydantic models<ul> <li>Validation</li> </ul> </li> <li>FastAPI<ul> <li>Reference</li> </ul> </li> <li>MongoDB</li> <li>User management</li> <li> <p>Token management</p> </li> <li> <p>Devcontainer</p> </li> <li> <p>GitHub Actions</p> </li> <li> <p>Excalidraws:</p> <ul> <li>Authentication system</li> <li>Data collections processing</li> <li>Join data collections</li> <li>Modularitu and  code helpers</li> </ul> </li> </ul>"},{"location":"features/frontend_components/","title":"Frontend components","text":""},{"location":"features/frontend_components/#generic-components-data-collection-table","title":"Generic components (Data collection Table)","text":"<p>There are currently 4 main components supported to build your dashboard:</p> <ul> <li>Figures: Bar, Line, Scatter, Box and Histogram plots.</li> <li>Metrics cards: Cards displaying metrics values.</li> <li>Interactive components: (slider, dropdown, input text, etc.)</li> <li>Tables: Interactive tables with sorting, filtering and searching functionalities.</li> </ul>"},{"location":"features/frontend_components/#specific-components","title":"Specific components","text":"<ul> <li>JBrowse: Genome browser to visualize genomic data.</li> <li>Graphs: Network graphs to visualize interactions between entities.</li> <li>Geomap: Geographical map.</li> </ul>"},{"location":"features/modularity/","title":"Modularity","text":"<p>Depictio code is designed with a modular architecture, allowing for easy integration of new features and functionalities. The frontend and backend components are decoupled, enabling independent development and deployment of each module. The platform is built to be scalable and adaptable to various needs, with a focus on user-friendly interfaces and interactive data visualization tools. </p>"},{"location":"features/modularity/#general-object-model-and-database-design","title":"General object model and database design","text":"<p>Depictio object model was designed to reflect production-oriented workflows. The architecture is built to ensure a clear separation of concerns, with distinct layers for workflows, workflow run configurations, runs, files generated, and data collections. This modular approach is reflected in both the database schema and the API structure.</p>"},{"location":"features/modularity/#workflow-object-design","title":"Workflow Object Design","text":"<ul> <li>Workflow: The top-level entity that encapsulates that represents a production-oriented pipeline/workflow. </li> <li>Run Configurations: These define the parameters and settings that were used to run a workflow. </li> <li>Runs: Instances of a production workflow executed using a specific run configuration. Each run generates output files, that are structured the same way across runs. These files can then be associated into data collections.</li> <li>Files: Artifacts produced by each run. These can be intermediate or final results of the workflow.</li> <li>Data Collections: Aggregated data from files following the same structure.</li> </ul> <p>The following diagram illustrates the relationships between different entities in Depictio:</p> <p></p>"},{"location":"features/modularity/#code-architecture","title":"Code architecture","text":"<p>The code organisation clearly separates each of the frontend components and the API endpoints, making it easy to understand and extend the platform. </p> <p></p>"},{"location":"features/modularity/#api-structure","title":"API structure","text":"<p>The API is structured to mirror the object design specified above, with each major component of the workflow having its own set of endpoints and models. The organization within <code>depictio/api/v1/endpoints</code> is as follows:</p> <ul> <li>dashboards_endpoints: Manages endpoints related to dashboards.</li> <li>datacollections_endpoints: Handles endpoints for data collections, mapping closely to the Data Collection objects in the design.</li> <li>deltatables_endpoints: Provides endpoints for delta tables, which are specific types of data collections with versioning.</li> <li>files_endpoints: Manages file-related endpoints, directly corresponding to the File objects.</li> <li>jbrowse_endpoints: Contains endpoints for jbrowse-specific functionalities, likely related to genomic data visualization.</li> <li>user_endpoints: Manages user authentication and authorization, including models and routes for user management.</li> <li>utils_endpoints: Provides utility endpoints, typically for internal or auxiliary operations.</li> <li>workflow_endpoints: Focuses on managing workflows, run configurations, and runs, reflecting the core of the workflow architecture.</li> </ul> <p>Each endpoint is defined in a separate subfolder, where the <code>routes.py</code> file contains the API routes and the <code>models.py</code> file contains the object models associated.</p> <p></p>"},{"location":"features/modularity/#dashboard-components","title":"Dashboard components","text":"<p>The frontend components in Depictio are organized in the depictio/dash/modules folder, with each component defined in a separate subfolder. This modular design ensures easy integration and maintainability.</p>"},{"location":"features/modularity/#component-structure","title":"Component Structure","text":"<p>Each component folder typically contains:</p> <ul> <li>frontend.py: Implements Dash callback functions.</li> <li>utils.py: Contains helper functions for rendering and state management.</li> </ul> <p>Each of the frontend components is designed to be modular and can be easily integrated into the dashboard. Each component is defined in a separate folder, containing the component logic and styling. The <code>frontend.py</code> file contains the dash callback functions implementation and the <code>utils.py</code> file contains the helpers functions used by the component, allowing the component to be re-rendered in different scenarios (first design, reload/restore, refresh after data update).</p> <p></p>"},{"location":"installation/docker/","title":"Docker-compose setup","text":""},{"location":"installation/docker/#clone-the-repository","title":"Clone the repository","text":"<p>Clone the repo as well as its submodules:</p> <pre><code>git clone --recurse-submodules https://github.com/depictio/depictio.git\n</code></pre>"},{"location":"installation/docker/#edit-the-configuration-and-create-volumes","title":"Edit the configuration and create volumes","text":"<p>Edit the <code>.env</code> file to update the data volume path where your data is stored:</p> <pre><code>DEPICTIO_BACKEND_DATA_VOLUME_HOST=/ABSOLUTE/PATH/TO/depictio-data\n</code></pre> <p>Create volumes that will be used by the services:</p> <pre><code>mkdir -p depictio-data/ &amp;&amp; chmod -R 777 depictio-data/\nmkdir -p depictioDB/ &amp;&amp; chmod -R 777 depictioDB/\nmkdir -p minio_data/ &amp;&amp; chmod -R 775 minio_data/\nmkdir -p depictio/keys/ &amp;&amp; chmod -R 775 depictio/keys/\nmkdir -p depictio/.depictio/ &amp;&amp; chmod -R 775 depictio/.depictio/\n</code></pre>"},{"location":"installation/docker/#start-the-services","title":"Start the services","text":"<p>Start the docker-compose services (latest version accessible here):</p> <pre><code>docker compose up -d --build\n</code></pre> <p>This will build the images and start the services. </p>"},{"location":"installation/docker/#list-of-services-and-corresponding-urls","title":"List of services and corresponding URLs","text":"<p>The services will be available at the following URLs (with default ports and configurations):</p> <ul> <li>Depictio frontend: http://localhost:5080</li> <li>Depictio backend: http://localhost:8058</li> <li>MinIO: http://localhost:9000</li> <li>MinIO WebUI: http://localhost:9001</li> <li>MongoDB: http://localhost:27018</li> </ul>"},{"location":"installation/install/","title":"Statements","text":"<p>Warning</p> <ul> <li>Depictio is currently in development and is not yet ready for production use. We currently only support an installation using Docker Compose or Kubernetes (documentation ongoing).</li> <li>A current limitation of the system is that the data to be ingested into depictio needs to be accessible by the depictio backend. This means that the data needs to be mounted into the docker container. This is a limitation we are working on addressing in the future.</li> <li>We currently don't offer the possibility use existing public/private keys for token generation. Keys will be automatically generated by the system and stored in the <code>depictio/keys</code> folder.</li> <li>We currently rely on our own MinIO S3 bucket management instance for data storage. In the future, we plan to support other S3-compatible services.</li> </ul>"},{"location":"installation/kubernetes/","title":"Kubernetes setup","text":"<p>Ongoing</p>"},{"location":"usage/get_started/","title":"Getting started","text":""},{"location":"usage/get_started/#ingest-example-data","title":"Ingest example data","text":""},{"location":"usage/get_started/#depictio-cli-setup","title":"depictio-cli setup","text":"<p>Note</p> <ul> <li>The depictio-cli is a command line interface that allows you to interact with the Depictio backend. It is used to register data collections and workflows, as well as to submit jobs. The depictio-cli is currently in development and is not yet ready for production use.</li> <li>Prerequisite: virtualenv or conda needs to be installed on your machine.</li> </ul> <p>To ingest example data, you can use the depictio-cli. The depictio-cli is a command line interface that allows you to interact with the Depictio backend. It is used to register data collections and workflows, as well as to submit jobs. The depictio-cli is currently in development and is not yet ready for production use.</p> <p>Clone the depictio-cli repository:</p> <pre><code>https://github.com/depictio/depictio-cli.git\n</code></pre> <p>Create the depictio-cli python venv using the following:</p> <pre><code># Set up a virtual environment\npython -m venv depictio-cli-venv\n\n# Activate the virtual environment\nsource depictio-cli-venv/bin/activate \n\n# Install the depictio-cli package\npip install -e . \n\n# Add the depictio package to the PYTHONPATH\nexport PYTHONPATH=$PYTHONPATH:$PWD/depictio-cli\n</code></pre>"},{"location":"usage/get_started/#running-the-ingestion-command-through-the-depictio-cli","title":"Running the ingestion command through the depictio-cli","text":"<p>Using the depictio-cli, you can ingest example data by running the following command:</p> <pre><code>depictio-cli data setup \\\n    --agent-config-path ../depictio/.depictio/default_admin_agent.yaml \\\n    --pipeline-config-path configs/mosaicatcher_pipeline/mosaicatcher_pipeline.yaml \\\n    --scan-files\n</code></pre> <p>The depictio-cli will do the following:</p> <ul> <li>Validate the agent configuration against the API to ensure that the token is valid and user has the necessary permissions.</li> <li>Validate the pipeline configuration against the API to ensure that the configuration is valid.</li> <li>Register the workflows and data collections with the API.</li> <li>Iterate through the files in the data directory listed in the pipeline configuration, create corresponding file objects in the mongo database, and associate them with the data collections.</li> </ul> <p>Then the depictio-backend will iterate through the files in the data directory listed in the pipeline configuration, and accordingly to the data collections created:</p> <ul> <li>Data collection of type Table: Read each of the file, aggregate them into a DeltaLake format, and store them in the MinIO bucket.</li> <li>Data collection of type JBrowse: Transfer the files to the MinIO bucket in a specific files structure that is compatible with JBrowse and Depictio.</li> </ul> <p>#TODO</p> <ul> <li>Show a log example of the result of the ingestion</li> <li>Logging through the admin default credentials</li> <li>Example dataset </li> </ul>"},{"location":"usage/guides/cli/","title":"Depictio CLI setup","text":"<p>Note</p> <ul> <li>The depictio-cli is a command line interface that allows you to interact with the Depictio backend. It is used to register data collections and workflows, as well as to submit jobs. The depictio-cli is currently in development and is not yet ready for production use.</li> <li>Prerequisite: virtualenv or conda needs to be installed on your machine.</li> </ul> <p>Clone the depictio-cli repository:</p> <pre><code>https://github.com/depictio/depictio-cli.git\n</code></pre> <p>Create the depictio-cli python venv using the following:</p> <pre><code># Set up a virtual environment\npython -m venv depictio-cli-venv\n\n# Activate the virtual environment\nsource depictio-cli-venv/bin/activate \n\n# Install the depictio-cli package\npip install -e . \n\n# Add the depictio package to the PYTHONPATH\nexport PYTHONPATH=$PYTHONPATH:$PWD/depictio-cli\n</code></pre> <pre><code>depictio-cli data setup \\\n    --agent-config-path ../depictio/.depictio/default_admin_agent.yaml \\\n    --pipeline-config-path configs/mosaicatcher_pipeline/mosaicatcher_pipeline.yaml \\\n    --scan-files\n</code></pre>"},{"location":"usage/guides/cli/#reference","title":"Reference","text":"<p>::: src.test.MyClass     handler: python     options:       members:         - method_a         - method_b       show_root_heading: true       show_source: true</p>"},{"location":"usage/guides/dashboard_creation/","title":"Dashboard Creation","text":""},{"location":"usage/guides/dashboard_creation/#add-a-component-to-the-dashboard","title":"Add a component to the dashboard","text":""},{"location":"usage/guides/dashboard_creation/#step-1-component-selection","title":"Step 1: Component Selection","text":"<ol> <li>Begin by clicking on the \"+ New Dashboard\" button to create a new dashboard.</li> <li>In the \"Design your new dashboard component\" modal:</li> <li>Choose from the available standard or special components (e.g., Figure, Card, Interactive, Table, or special components like JBrowse, Graph, Map).</li> <li>For this example, select Figure for the scatter plot and Histogram for the histogram, and Interactive for interactive components.</li> <li>Once you\u2019ve chosen the component, click Next Step.</li> </ol>"},{"location":"usage/guides/dashboard_creation/#step-2-data-selection","title":"Step 2: Data Selection","text":"<ol> <li>For each selected component, choose the corresponding workflow and data collection from the dropdowns.</li> <li>Verify the Data Collection Info, such as Workflow ID, Table type, MongoDB ID, and Data preview.</li> <li>Click Next Step to proceed.</li> </ol>"},{"location":"usage/guides/dashboard_creation/#step-3-customize-your-component","title":"Step 3: Customize Your Component","text":"<ol> <li>Choose Visualization or Interactive Type:</li> <li> <p>Based on the component type selected in Step 1, choose the appropriate visualization or interactive type from the list of available options (e.g., Bar, Scatter, Histogram, RangeSlider).</p> </li> <li> <p>Set Data Parameters:</p> </li> <li>Define key parameters such as X-axis and Y-axis (if applicable), and assign the relevant data columns from your dataset.</li> <li> <p>Configure additional data settings, such as filters or ranges, depending on the component's functionality.</p> </li> <li> <p>Adjust Specific Parameters:</p> </li> <li>Customize visualization-specific parameters like colors, bin sizes, or axis labels to refine how the data is presented.</li> <li> <p>For interactive components, configure sliders, filters, or dropdown options based on the desired user interactions.</p> </li> <li> <p>Finalize Customization:</p> </li> <li>Review the component preview and ensure all settings are accurate.</li> <li>Once complete, click Next Step to proceed to the final stage.</li> </ol> <p>Other examples:</p>"},{"location":"usage/guides/dashboard_usage/","title":"Using the Dashboard","text":""},{"location":"usage/guides/dashboard_usage/#right-sidebar-parameters","title":"Right Sidebar Parameters","text":"<p>The right sidebar allows you to customize the appearance and behavior of the dashboard. Currently it includes the following options:</p>"},{"location":"usage/guides/dashboard_usage/#switches","title":"Switches","text":"<ul> <li>Edit Dashboard layout: allow you to enable or disable the layout editing mode, which allows you to modify the size and position of the components. Interactions with the components are still enabled in this mode.</li> <li>Display components options: show or hide the options of the components at the top of each component. When hidden, the options will not be displayed. See the Component-wise options section for more details.</li> <li>Toggle interactivity: enable or disable the interactivity of the components. When disabled, the components will not respond to user interactions.</li> </ul>"},{"location":"usage/guides/dashboard_usage/#buttons","title":"Buttons","text":"<ul> <li>Remove all components: remove all components from the dashboard.</li> <li>Reset all filters: reset all filters applied to the components.</li> </ul>"},{"location":"usage/guides/dashboard_usage/#component-wise-options","title":"Component-wise options","text":"<p>When the Display components options switch is enabled, each component will display a set of options at the top of the component. These options allow you to perform the following actions:</p> <ul> <li> Delete: Remove the component from the dashboard.</li> <li> Edit: Open a modal to modify the component settings.</li> <li> Clone: Create a copy of the component.</li> <li> Reset filters: Clear all filters applied to the component.</li> </ul>"},{"location":"usage/guides/dashboard_usage/#interactivity","title":"Interactivity","text":""},{"location":"usage/guides/dashboard_usage/#interactive-actions","title":"Interactive Actions","text":"<p>There are currently two types of interactive actions available in the dashboard:</p> <ul> <li>Through the interactive components (e.g., RangeSlider, MultiSelect, TextInput, etc.).</li> <li>Through the graph components (only Scatter plots are handled yet). <ul> <li>Click mode: When you click on a point in the scatter plot, the other components will be updated according to the data point clicked. </li> <li>Selection mode: When you select a region in the scatter plot (using the \"Box select\" option), the other components will be updated according to the data points in the selected region.</li> </ul> </li> </ul>"},{"location":"usage/guides/dashboard_usage/#reset-filters","title":"Reset Filters","text":"<ul> <li>Reset all filters You can reset all filters applied to the components by clicking the Reset all filters button in the right sidebar. This will clear all filters applied to the components and reset them to their default state. </li> <li>Reset graph filters You can reset the filters applied to the graph components by clicking the orange  Reset button in the component options at the top of the box. This will clear the filters applied to the graph component and reset it to its default state.</li> </ul>"},{"location":"usage/guides/dashboard_usage/#saving-the-dashboard","title":"Saving the Dashboard","text":"<ol> <li>Once your dashboard is ready, click the Save icon (green button at the top right).</li> <li>A modal will appear confirming that your dashboard has been saved (e.g., \"Your amazing dashboard was successfully saved!\").</li> <li>Click Close to dismiss the modal.</li> <li>Your dashboard will now appear with a thumbnail under the Recently Viewed section on the landing page.</li> </ol>"},{"location":"usage/guides/dashboard_usage/#example-dashboard-result","title":"Example Dashboard result","text":""},{"location":"usage/guides/web_ui/","title":"Web UI","text":""},{"location":"usage/guides/web_ui/#introduction","title":"Introduction","text":""},{"location":"usage/guides/web_ui/#register-and-login","title":"Register and login","text":""},{"location":"usage/guides/web_ui/#registering-an-account-sign-up","title":"Registering an Account (Sign Up)","text":"<ol> <li>Navigate to the Registration page by clicking the Register button on the login screen.</li> </ol> <ol> <li> <p>Enter your email address in the \"Email\" field.</p> </li> <li> <p>Create a password and enter it in the \"Password\" field. You can click the eye icon to view the password as you type and Confirm your password by re-entering it in the \"Confirm Password\" field.</p> </li> <li> <p>Click the Register button to submit your registration details.</p> </li> <li> <p>After successful registration, you can return to the login page by clicking the Back to Login button.</p> </li> </ol> <p></p>"},{"location":"usage/guides/web_ui/#logging-in-sign-in","title":"Logging In (Sign In)","text":"<ol> <li>Open the Depictio Login page.</li> <li>Enter your email address in the \"Email\" field.</li> <li>Enter your password in the \"Password\" field.</li> <li>If you want to see the password as you type it, click the eye icon next to the password field.</li> <li>Once both fields are filled in, click the Login button.</li> <li>You will be redirected to the Depictio landing page (currently <code>/dashboards</code>).</li> </ol>"},{"location":"usage/guides/web_ui/#landing-page-dashboards-section-dashboards","title":"Landing page / Dashboards section (/dashboards)","text":""},{"location":"usage/guides/web_ui/#creating-a-new-dashboard","title":"Creating a New Dashboard","text":"<ol> <li>On the landing page, click the orange \"+ New Dashboard\" button located in the top right corner.</li> <li>A pop-up window will appear with a field labeled \"Dashboard Title\".</li> <li>Enter a name for your new dashboard.</li> <li>Your dashboard will be created with the title you provided and added to the section.</li> <li>Click the blue \"Create Dashboard\" button to create the dashboard.</li> <li>The new dashboard will appear in the section with informations including name, owner and status (public/private).</li> </ol>"},{"location":"usage/guides/web_ui/#functionalities","title":"Functionalities","text":""},{"location":"usage/guides/web_ui/#viewing-a-dashboard","title":"Viewing a Dashboard","text":"<ol> <li>Once a dashboard is created, it will appear under the section.</li> <li>Click the \"View\" button next to the dashboard name to open and explore its content.</li> </ol>"},{"location":"usage/guides/web_ui/#deleting-a-dashboard","title":"Deleting a Dashboard","text":"<ol> <li>To delete a dashboard, locate the dashboard in the section.</li> <li>Click the red \"Delete\" button next to the dashboard name.</li> <li>A confirmation pop-up will appear, asking \"Are you sure you want to delete this dashboard?\".</li> <li>Click \"Delete\" to permanently remove the dashboard, or \"Cancel\" to keep it.</li> </ol>"},{"location":"usage/guides/web_ui/#editing-dashboard-name","title":"Editing dashboard name","text":"<ol> <li>To edit the name of a dashboard, locate the dashboard in the section.</li> <li>Click the \"Edit name\" button next to the dashboard name.</li> <li>A pop-up window will appear with a field labeled \"New name\".</li> <li>Enter a new name for your dashboard.</li> <li>Click the blue \"Save\" button to save the new name.</li> </ol>"},{"location":"usage/guides/web_ui/#duplicating-a-dashboard","title":"Duplicating a dashboard","text":"<ol> <li>To duplicate a dashboard, locate the dashboard in the section.</li> <li>Click the \"Duplicate\" button next to the dashboard name.</li> <li>The dashboard will be duplicated and added to the section with the suffix \"(copy)\".</li> </ol> <p>Note</p> <p> </p> <p>Both \"public\" and \"private\" dashboards are listed in the Dashboards section. Public dashboards are accessible to all users, while private dashboards are only visible to the user who created them.  Only the user who created a private dashboard can edit, or delete it.</p>"},{"location":"usage/guides/web_ui/#projects-section-projects","title":"Projects section (/projects)","text":"<ul> <li>The left sidebar includes a \"Projects\" section where users can manage their projects. Click on \"Projects\" to navigate and view them.</li> </ul> <p>You will have access recursively to the workflows related to the project and the data collections related to each of the workflows. Each entity will allow you to access the details of the entity, to see the related configuration used, as well as previsualize the data (for data collections of type <code>table</code>).</p>"},{"location":"usage/guides/web_ui/#user-information-profile","title":"User Information (/profile)","text":"<ul> <li>At the bottom of the left sidebar, you will find:</li> <li>Server status: Displays the current server version and online status.</li> <li>User information: Displays your username and email (e.g., \"test3@embl.de\").</li> </ul>"},{"location":"usage/guides/web_ui/#about-section-about","title":"About section (/about)","text":"<p>The About section provides information about the GitHub repository and the documentation. </p>"},{"location":"usage/guides/web_ui/#admin-section-admin","title":"Admin section (/admin)","text":"<p>The Admin section is only accessible to users with admin privileges. It allows admins to view users, projects and dashboards. The Users tab displays a list of all users registered in the system, while the Dashboards tab displays a list of all dashboards. The Projects tab is currently under development.</p>"}]}